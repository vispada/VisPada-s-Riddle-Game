export type SoundType = 'start' | 'correct' | 'incorrect' | 'hint' | 'skip' | 'end' | 'timeup';

// Using very short, royalty-free sound effects encoded in base64 to avoid external file dependencies.
const sounds: Record<SoundType, string> = {
    start: 'data:audio/wav;base64,UklGRiQAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQAAAAA=',
    correct: 'data:audio/wav;base64,UklGRlIAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YSBIAAABgGoHk/s/D5j9Bv55/mP+l/3T/nf+w/2f/wD94/zX/N/8l/y3/Pf9M/5s/sP+kP6H/m7+wv7x/wH/mP6H/l/+vP6t/rr/Rf8t/zr/Qv9M/2H/gv+U/6v/wv/N/9T/2f/e/+L/6P/w//n/+wAAAAAEAAgADgAbACgALwA+AEsAVwBeAGgAbwB4AH8AhgCLAJgAnwCrALcAwADKAMwA0wDYAN4A5ADrAPQA+gECARQBGgEjASwBNgFEAUwBVgFeAWcBbAF5AYMBjAGTAaMBqQGzAbgBvgHIAccB0QHXAeIB6AHxAfwCAgIRAhcCHwIoAjUCRQJQAloCYQJsAnQCfQKMAlgCcgJ7ApkCqwK/AssC3wLiAvsDFgMuAzkDQgNQA2QDeAOMA6YDtgPcBCMELgQ+BEsEWgRsBHoEmASuBL0EzAUJBRsFKAU/BUoFVQVjBXsFjQV7BY8FgwWBBXgFewWOBeAFcwVIBTEFPAU5BT8FPwVABSsFKQUoBSkFKwUrBSoFJQUpBSgFKQUpBSkFKQUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUnBSYFJwUn-w==',
    incorrect: 'data:audio/wav;base64,UklGRiQAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQAAAAA=',
    hint: 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YRAAAAAA/3D/cv9y/3L/cv9y/3MA',
    skip: 'data:audio/wav;base64,UklGRiYAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YRIAAAAAMP9w/3L/c/9z/3MA',
    end: 'data:audio/wav;base64,UklGRiQAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQAAAAA=',
    timeup: 'data:audio/wav;base64,UklGRiQAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQAAAAA=',
};

// Use a pool of audio objects to handle rapid playback
const audioPool: { [key in SoundType]?: HTMLAudioElement[] } = {};
const MAX_POOL_SIZE = 5; // Max simultaneous sounds of the same type
let playCount = 0; // Round-robin index

export function playSound(type: SoundType) {
    try {
        if (!audioPool[type]) {
            audioPool[type] = [];
        }

        // Find an available (paused) audio element in the pool
        let audio = audioPool[type]?.find(a => a.paused);

        if (audio) {
            audio.currentTime = 0;
        } else {
            // If no available audio object, create a new one if pool is not full
            if (audioPool[type]!.length < MAX_POOL_SIZE) {
                audio = new Audio(sounds[type]);
                audioPool[type]!.push(audio);
            } else {
                // Otherwise, reuse an existing one using round-robin
                playCount = (playCount + 1) % MAX_POOL_SIZE;
                audio = audioPool[type]![playCount];
                audio.src = sounds[type];
            }
        }
        
        audio.play().catch(e => console.error(`Error playing sound: ${type}`, e));

    } catch (e) {
        console.error(`Could not play sound: ${type}`, e);
    }
}
